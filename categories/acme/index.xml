<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Acme on 小类随手记</title><link>https://dev.leiyanhui.com/categories/acme/</link><description>Recent content in Acme on 小类随手记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 16 Feb 2023 08:14:20 +0800</lastBuildDate><atom:link href="https://dev.leiyanhui.com/categories/acme/index.xml" rel="self" type="application/rss+xml"/><item><title>从自己的github上自动获取证书并部署到本地</title><link>https://dev.leiyanhui.com/web/auto-updatessl-form-github/</link><pubDate>Thu, 16 Feb 2023 08:14:20 +0800</pubDate><guid>https://dev.leiyanhui.com/web/auto-updatessl-form-github/</guid><description>&lt;p>之前在github 下用两个库实现了自动更新 地址 ：&lt;a class="link" href="https://dev.leiyanhui.com/web/auto-get-ssl" target="_blank" rel="noopener"
>https://dev.leiyanhui.com/web/auto-get-ssl&lt;/a>&lt;/p>
&lt;p>这里记录下 使用的时候自动部署的方法
以alpine下为例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">apk add nano wget p7zip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rc-update add crond boot
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">service crond start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd /root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nano auto-updatessl-form-github.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cat&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">updatessl&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">form&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">github&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sh&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">root&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rm&lt;/span> &lt;span class="n">ssl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zip&lt;/span>&lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wget&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">cdn&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jsdelivr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">net&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">gh&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">XXXX&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">sXXXX&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zip&lt;/span> &lt;span class="c1">#https://github.com/XXXXXXXXXXXXX.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="o">!&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="s2">&amp;#34;/root/ssl.zip&amp;#34;&lt;/span> &lt;span class="p">];&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wget&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">O&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">dev&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">null&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">api&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">day&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="err">你的&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">SSL&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">err&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">mino&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="n">sound&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">birdsong&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">isArchive&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">rf&lt;/span> &lt;span class="n">ssl&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">7&lt;/span>&lt;span class="n">z&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">ssl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zip&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">p密码&lt;/span> &lt;span class="c1">#密码和p之间不能有空格&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">supervisorctl&lt;/span> &lt;span class="n">restart&lt;/span> &lt;span class="n">minio&lt;/span> &lt;span class="c1">#根据情况修改&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nginx&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="n">reload&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">echo&lt;/span> &lt;span class="s2">&amp;#34;15 8 * * * sh /root/auto-updatessl-form-github.sh&amp;#34;&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">etc&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">crontabs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">cat&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">etc&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">crontabs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">root&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>添加计划任务 crontab -e 每天7点50&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="m">50&lt;/span> &lt;span class="m">7&lt;/span> * * * sh /root/auto-updatessl-form-github.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>私有仓库GitHub actions运行acme.sh 并加密推送到公开仓库</title><link>https://dev.leiyanhui.com/web/auto-get-ssl/</link><pubDate>Tue, 14 Feb 2023 07:14:20 +0800</pubDate><guid>https://dev.leiyanhui.com/web/auto-get-ssl/</guid><description>&lt;p>考虑到使用方便，把证书加密后 发送到公开仓库。部署的时候，只需要定时从公开仓库wget下来即可使用。&lt;/p>
&lt;p>后续会考虑自动推送到cdn，因为cdn那边是生产环境，暂时还是不用免费证书。&lt;/p>
&lt;h1 id="github自动申请-域名证书加密推送到公开库以及自动部署等">github自动申请 域名证书，加密推送到公开库以及自动部署等
&lt;/h1>&lt;h3 id="自动申请">自动申请
&lt;/h3>&lt;h4 id="准备">准备
&lt;/h4>&lt;p>1、两个github仓库 1个私有库 存放 自动脚本，另外一个公开仓库存放加密的证书压缩包 公开就好，可以开pages 或者套cdn 默认分支为main&lt;/p>
&lt;p>2、申请域名证书的域名dns服务器的api，我这里都是用dnspods为例&lt;/p>
&lt;p>3、一对ssh公私钥。公钥匙要配置到 公开仓库 的Deploy keys，私玥部署到 私有库的Secret&lt;/p>
&lt;p>4、一个16位以上足够复杂的密码（zip包可以穷举，所以务必要高强度的密码）&lt;/p>
&lt;p>5、少许linux基础知识&lt;/p>
&lt;h4 id="配置加密信息">配置加密信息
&lt;/h4>&lt;h5 id="配置公私玥">配置公私玥
&lt;/h5>&lt;p>公开库的在仓库的 Settings 中Deploy keys添加 填写 ssh公钥，勾选上 Allow write access 名字随意&lt;/p>
&lt;p>私钥部署到私有库的Secret 名称为 MYGITHUBKEY&lt;/p>
&lt;h5 id="dns-api">dns api
&lt;/h5>&lt;p>在仓库的 Settings 中添加 Secret，创建 DNSAPI 填写上文获取的 API KEY 格式如下，具体格式 查看 acme.sh 的文档&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">DP_Id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;214234234&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">DP_Key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;XXXXXXXXXX&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">CF_Token&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;XXXXXXXXXXXXXX&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">CF_Account_ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;XXXXXXXXXXXX&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="压缩包密码">压缩包密码
&lt;/h5>&lt;p>再创建一个 ZIPPASSWORD 输入压缩包解压密码，一定必须要超级高强度的密码。比如 16位以上 包含数字字母特殊符号汉字&lt;/p>
&lt;h5 id="配置github-actions">配置github actions
&lt;/h5>&lt;p>在私有仓库中创建 &lt;code>​ .github/workflows/AutoACME.yml ​&lt;/code>​ 配置文件,参考复制粘贴如下.&lt;/p>
&lt;blockquote>
&lt;p>cron 是 UTC时间 每月26日下午17点7分 自动执行
完整内容参考 ：https://github.com/joyanhui/file.leiyanhui.com/blob/main/github-actions/%E8%87%AA%E5%8A%A8%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0%E5%85%AC%E5%BC%80%E4%BB%93%E5%BA%93.yml&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">name: Auto ACME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> workflow_dispatch:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> schedule:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - cron: &lt;span class="s2">&amp;#34;7 17 20 * *&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> watch:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> types: &lt;span class="o">[&lt;/span>started&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">env:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ACME: /home/runner/.acme.sh/acme.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PUBHUB: /你的用户名/仓库地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DNSAPI: &lt;span class="si">${&lt;/span>&lt;span class="p">{ secrets.DNSAPI &lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ZIPPASSWORD: &lt;span class="si">${&lt;/span>&lt;span class="p">{ secrets.ZIPPASSWORD &lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYGITHUBKEY: &lt;span class="si">${&lt;/span>&lt;span class="p">{ secrets.MYGITHUBKEY &lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> EMAIL: 你的邮箱地址@qq.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TZ: Asia/Shanghai
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> build:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>: github.event.repository.owner.id &lt;span class="o">==&lt;/span> github.event.sender.id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Checkout
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/checkout@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ref: main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> github_token: &lt;span class="si">${&lt;/span>&lt;span class="p">{ secrets.GITHUB_TOKEN &lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: 安装和初始化acme.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl https://get.acme.sh &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$DNSAPI&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt;&amp;gt; /home/runner/.acme.sh/account.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$ACME&lt;/span> --register-account -m &lt;span class="nv">$EMAIL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: 开始获取证书
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mkdir -p ./ssl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#如果要处理多个域名，复制后面三行即可 默认使用zerossl的证书 其他参数参考acme.sh文档&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">mydomian&lt;/span>&lt;span class="o">=&lt;/span>你的域名.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$ACME&lt;/span> --issue --dns dns_dp -d &lt;span class="si">${&lt;/span>&lt;span class="nv">mydomian&lt;/span>&lt;span class="si">}&lt;/span> -d *.&lt;span class="si">${&lt;/span>&lt;span class="nv">mydomian&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$ACME&lt;/span> --installcert -d &lt;span class="si">${&lt;/span>&lt;span class="nv">mydomian&lt;/span>&lt;span class="si">}&lt;/span> --key-file ./ssl/&lt;span class="si">${&lt;/span>&lt;span class="nv">mydomian&lt;/span>&lt;span class="si">}&lt;/span>.key --fullchain-file ./ssl/&lt;span class="si">${&lt;/span>&lt;span class="nv">mydomian&lt;/span>&lt;span class="si">}&lt;/span>.cer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: 带密码打包证书
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zip -r acme.zip /home/runner/.acme.sh -P &lt;span class="nv">$ZIPPASSWORD&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zip -r ssl.zip ssl -P &lt;span class="nv">$ZIPPASSWORD&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: 提交加密后的证书到公开库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mkdir -p ~/.ssh/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$MYGITHUBKEY&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt; ~/.ssh/id_rsa
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> chmod &lt;span class="m">600&lt;/span> ~/.ssh/id_rsa
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssh-keyscan github.com &amp;gt;&amp;gt; ~/.ssh/known_hosts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rm -rf .git* &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm -rf README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;处理公开库的readme文件&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wget https://raw.githubusercontent.com/&lt;span class="nv">$PUBHUB&lt;/span>/main/README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;\n证书最后更新： &lt;/span>&lt;span class="k">$(&lt;/span>date &lt;span class="s1">&amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&amp;gt;&amp;gt;README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global user.name &lt;span class="s2">&amp;#34;githubactions bot&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global user.email &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$ACME&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git add ./ssl.zip ./README.md ./acme.zip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git commit -m &lt;span class="s2">&amp;#34;证书自动更新 on &lt;/span>&lt;span class="k">$(&lt;/span>date &lt;span class="s1">&amp;#39;+%Y-%m-%d %H:%M:%S&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git remote add origin git@github.com:&lt;span class="nv">$PUBHUB&lt;/span>.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git remote -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git push origin master:main -f -q
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>‍&lt;/p>
&lt;p>‍&lt;/p>
&lt;p>客户端使用 wget 后 7z -P 密码 ，然后 nginx -s reload即可&lt;/p>
&lt;p>自动更新 参考 ：&lt;a class="link" href="https://dev.leiyanhui.com/web/auto-updatessl-form-github" target="_blank" rel="noopener"
>https://dev.leiyanhui.com/web/auto-updatessl-form-github&lt;/a>&lt;/p>
&lt;p>自动部署到国内cdn 后续处理&lt;/p></description></item><item><title>docker运行nginx 并反代内网的一些服务2(nginxwebui修改版)</title><link>https://dev.leiyanhui.com/openwrt/nginx-proxy-ssl/</link><pubDate>Sat, 07 Jan 2023 08:14:20 +0800</pubDate><guid>https://dev.leiyanhui.com/openwrt/nginx-proxy-ssl/</guid><description>&lt;p>家里路由器是openwrt x86，内外有跑一些服务。这里用路由器上配置nginx+ssl，然后内网的所有web服务都经过nginx到公网，因为家用宽带不只&lt;/p>
&lt;p>nginxwebui是国产基于java的开源nginx配置文件生成器，用于替代死板的nginx-proxy-manage 。&lt;/p>
&lt;p>优点是 更加灵活 强大 支持中文，几乎支持所有的nginx功能的可视化配置。&lt;/p>
&lt;p>缺点是 略微繁琐，尤其是不能自动载入配置文件，创建项目后，要手动在webui里面，点替换和重载。&lt;/p>
&lt;h2 id="docker安装">docker安装
&lt;/h2>&lt;p>nginxwebui 官网docker实例是用的host模式运行，不建议。还是自定义端口映射。&lt;/p>
&lt;p>我这里需要3个端口 nginxwebui管理端口50088，http 端口50081 https 端口50443&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">docker run -itd --restart=always --name=nginxwebui --hostname nginxwebui -e BOOT_OPTIONS=&amp;#34;--server.port=50088&amp;#34; -p 50081:50081 -p 50088:50088 -p 50443:50443 --privileged=true cym1102/nginxwebui:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>证书目录 是保存在： &lt;code>/home/nginxWebUI/.acme.sh/&lt;/code> 下面&lt;br>
配置文件&lt;code>/home/nginxWebUI/nginx.conf&lt;/code> 。&lt;/p>
&lt;p>如果需要对证书单独管理，可以映射出来。也恩可以用docker cp 定时复制出来。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">docker run -itd -v /opt/docker_file/op_nginxWebUI:/home/nginxWebUI --restart=always --name=nginxwebui --hostname nginxwebui -e BOOT_OPTIONS=&amp;#34;–server.port=50088&amp;#34; -p 50081:50081 -p 50088:50088 -p 50443:50443 --privileged=true cym1102/nginxwebui:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而后在 nginxwebui 内部 再反代 管理端口出来 套上ssl 即可从外网ssl访问。&lt;/p>
&lt;p>为了方便备份，我这里没有映射目录出来。记得自行定时清理日志：&lt;code>/home/nginxWebUI/log/nginxWebUI.log&lt;/code>&lt;/p>
&lt;p>注意： http://10.0.0.1:50088/ web界面 打开可能会空白，这个&amp;hellip;.大概是因为java启动慢的原因，等一会 刷新一下就好了。&lt;/p>
&lt;h2 id="一个典型的反代配置">一个典型的反代配置
&lt;/h2>&lt;p>包括http自动跳转ssl&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">转发类型 http
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">监听端口：这个如果要开启ssl的话要输入ssl端口 50443
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">选择密码文件：这个是base的密码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">开机ssl：是
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">选择内置证书：（提前配置）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">开启https：是
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssl协议版本：全部勾选
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http跳转https：是
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">从该端口跳转：第一个留空 第二个输入ssl的端口后 50081
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就可以实现，访问http的时候自动跳转到ssl &lt;br>
最终配置文件大概如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">server {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server_name 域名;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> listen 50443 ssl http2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_certificate /home/nginxWebUI/.acme.sh/jia.leiyanhui.com/fullchain.cer;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_certificate_key /home/nginxWebUI/.acme.sh/jia.leiyanhui.com/jia.leiyanhui.com.key;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> listen 50081;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ($scheme = http) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 301 https://$host:50443$request_uri;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> location / {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 自己;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_pass http://10.0.0.1:50088;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_set_header Host $host;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_set_header X-Real-IP $remote_addr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_set_header X-Forwarded-Host $http_host;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_set_header X-Forwarded-Port $server_port;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_set_header X-Forwarded-Proto $scheme;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_http_version 1.1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_set_header Upgrade $http_upgrade;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_set_header Connection &amp;#34;upgrade&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_redirect http:// https://;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="自动备份到阿里云镜像">自动备份到阿里云镜像
&lt;/h3>&lt;p>&lt;a class="link" href="https://dev.leiyanhui.com/docker/img-to-aliyun/" target="_blank" rel="noopener"
>https://dev.leiyanhui.com/docker/img-to-aliyun/&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">10 3 * * 6 sh /etc/docker_up_aliyun_nginxWebUi.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用nginxwebui反代-主路由的一个小问题">使用nginxWebUI反代 主路由的一个小问题
&lt;/h2>&lt;p>如果op主路由配置了 根据域名跳转（https://dev.leiyanhui.com/openwrt/acme-ssl/），op需要绑定一个不属于最终配置文件的域名 。或者 使用下面的方法。
另外 op里面的网页终端需要单独处理（我选择 直接弃用）。&lt;/p>
&lt;p>还有一个方案 是 不传递host参数，然后直接访问 https://你的域名:端口/cgi-bin/luci/ 也可以解决。&lt;/p>
&lt;h3 id="关于使用http协议访问https端口的400错误处理">关于使用http协议访问https端口的400错误处理
&lt;/h3>&lt;p>例如我正常访问我的路由器应该是&lt;code>https://域名:50443&lt;/code>如果用&lt;code>http://域名:50443&lt;/code>访问端口还是https的端口就会提示400错误。 因为服务是家人也用。 不能指望他们理解http（S）这些。所以我采取的方法是直接拦截错误，并跳转到正确的首页地址。&lt;/p>
&lt;p>首先这个错误是 497 错误，nginxWebUI支持参数模板，添加一个参数模板，名字随意，添加参数&lt;code>error_page 497&lt;/code> 值&lt;code>https://$host:50443; #解决http到ssl端口的400错误&lt;/code> 然后用默认配置应用到反向代理。完毕&lt;/p>
&lt;h3 id="最好的解决方案">最好的解决方案
&lt;/h3>&lt;p>编辑对应的ningxWebUi反向代理配置，
添加一个 &lt;code>= / &lt;/code> 自定义localtions 添加参数 &lt;code>return&lt;/code> 值&lt;code> 301 https://$host:50443/cgi-bin/luci&lt;/code> （意思就是网址后面没有东西的情况下跳转到后面地址）即可 （注意好要清理浏览器缓存不然不会生效） &lt;br>
最终代码如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">server {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server_name op.jia.leiyanhui.com;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> listen 50443 ssl http2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_certificate /home/nginxWebUI/.acme.sh/*.jia.leiyanhui.com/fullchain.cer;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_certificate_key /home/nginxWebUI/.acme.sh/*.jia.leiyanhui.com/*.jia.leiyanhui.com.key;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> listen 50081;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ($scheme = http) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 301 https://$host:50443$request_uri;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error_page 497 https://$host:50443; #解决http到ssl端口的400错误;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> location = / {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # op自动跳转;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 301 https://$host:50443/cgi-bin/luci;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> location / {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # op代理;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_pass http://10.1.1.1/;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy_redirect http:// https://;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="进阶">进阶
&lt;/h3>&lt;p>1、解决 在web界面直接点击 域名 链接打开的是不带端口的导致非标端口打不开的情况。 &lt;a class="link" href="https://github.com/joyanhui/nginxWebUI" target="_blank" rel="noopener"
>https://github.com/joyanhui/nginxWebUI&lt;/a>
2、解决 定时续签2点拥堵的问题，
下载 我自己的修改的 jar，替换到docker里面&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">docker&lt;/span> &lt;span class="n">exec&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">it&lt;/span> &lt;span class="n">nginxwebui&lt;/span> &lt;span class="n">rm&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">nginxWebUI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jar&lt;/span> &lt;span class="c1">#删除原版jar&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">wget&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">github&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">joyanhui&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">nginxWebUI&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">releases&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">download&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="n">st&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">nginxWebUI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jar&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">docker&lt;/span> &lt;span class="n">cp&lt;/span> &lt;span class="n">nginxWebUI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jar&lt;/span> &lt;span class="n">nginxwebui&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">nginxWebUI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jar&lt;/span> &lt;span class="c1"># 复制宿主机上的修改过的jar进去&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">docker&lt;/span> &lt;span class="n">restart&lt;/span> &lt;span class="n">nginxwebui&lt;/span> &lt;span class="c1">#重启&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">rf&lt;/span> &lt;span class="n">nginxWebUI&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jar&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="下载地址">下载地址
&lt;/h4>&lt;p>&lt;a class="link" href="https://www.123pan.com/s/EqorVv-n0nPA" target="_blank" rel="noopener"
>https://www.123pan.com/s/EqorVv-n0nPA&lt;/a> 提取码:yhjt&lt;/p>
&lt;p>详细 &lt;a class="link" href="https://github.com/joyanhui/nginxWebUI" target="_blank" rel="noopener"
>https://github.com/joyanhui/nginxWebUI&lt;/a>&lt;/p>
&lt;h3 id="其他问题">其他问题
&lt;/h3>&lt;p>nginxwebui 和 nginx-proxy-manager 都同样的问题，就是在web界面直接点击 域名 链接打开的是不带端口的。在前者的github 提交过issues但是作者没有回应。后at作者后，作者表示：&lt;code>这个界面是展示信息用，不是给你高强度使用的&lt;/code> 不知所云。&lt;/p>
&lt;blockquote>
&lt;p>已经自己修改 &lt;a class="link" href="https://github.com/joyanhui/nginxWebUI" target="_blank" rel="noopener"
>https://github.com/joyanhui/nginxWebUI&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>不过nginxwebui 相对 nginx-proxy-manager 依旧适合非标端口的
如果是内网使用，家用宽带没有标准端口的情况下，可以通过一个简单方法实现，就是在路由器上转发跳转一次，详情：https://dev.leiyanhui.com/openwrt/acme-ssl/&lt;/p>
&lt;p>另外 nginxwebui 的证书申请 有几个小遗憾，1 证书检查时间固定在凌晨2点不可以修改，还是很拥挤的。2 没有日志显示，如果出错你也不知道。。。只能等待。。。&lt;/p></description></item><item><title>docker运行 官方宝塔</title><link>https://dev.leiyanhui.com/docker/baota/</link><pubDate>Sun, 27 Nov 2022 08:14:20 +0800</pubDate><guid>https://dev.leiyanhui.com/docker/baota/</guid><description>&lt;p>宝塔 终于出官方docker了 基于&lt;code>CentOS 7.9.2009 x86_64&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://hub.docker.com/r/btpanel/baota" target="_blank" rel="noopener"
>https://hub.docker.com/r/btpanel/baota&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bt.cn/bbs/thread-79499-1-1.html" target="_blank" rel="noopener"
>https://www.bt.cn/bbs/thread-79499-1-1.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>LNMP镜像大小大概 733.3MB 解压后大概3006.51MB 。。。没得办法，宝塔的依赖项真的是太多了。。。
在软路由上搞起来先&lt;/p>
&lt;h2 id="先整理端口">先整理端口
&lt;/h2>&lt;p>不打算映射数据出来，方便转移，并预留ssh 和常用端口&lt;/p>
&lt;pre>&lt;code>#宝塔面板 22 ssl http phpmyadmin
-p 51888:8888 -p 51022:22 -p 51443:443 -p 51080:80 -p 51188:888 \
# 路由器封80 443自定义web端口 以及22重复
-p 51081:51081 -p 51444:51444 -p 51000:22 \
# mysql
-p 51306:3306 \
# redis
-p 51379:6379 \
# pgsql
-p 51432:5432 \
# MongoDB
-p 51017:27017 \
# 备用端口
-p 51200-51299:51200-51299 \
&lt;/code>&lt;/pre>
&lt;p>你问我为啥开这么多端口。。我开心我乐意，反正外网又访问不到。。。&lt;/p>
&lt;h2 id="镜像和标签的选择">镜像和标签的选择
&lt;/h2>&lt;p>latest 标签拉取的是lib标签，安装了面板并且安装集成依赖包，安装每个软件都会快一点。&lt;br>
fresh 标签表示安装了面板但是没有安装集成依赖包，安装第一个软件会比较慢，因为需要装依赖包。&lt;br>
lib 标签表示安装了面板并且安装集成依赖包，安装每个软件都会快一点。&lt;br>
lnmp 标签表示安装了面板、集成包并且集成LNMP【Nginx1.22+MySQL5.7+PHP7.4】arm标签是MySQL5.6&lt;br>
lamp 标签表示安装了面板、集成包并且集成LAMP【Apache2.4+MySQL5.7+PHP7.4】arm标签是MySQL5.6&lt;br>
我这里选择&lt;code>lnmp&lt;/code> 经过测试发现，其实还集成了ftp&lt;/p>
&lt;h2 id="目录的挂载">目录的挂载
&lt;/h2>&lt;p>/www/server/data 数据库&lt;br>
/www/wwwroot 网站目录 或者说 静态文件目录&lt;br>
/www/server/panel/vhost 虚拟机主机配置文件&lt;br>
其他目录参考宝塔官网&lt;br>
我不打算映射出来，因为可以在宝塔内挂载oss之类的网盘自动备份。&lt;br>
而且不映射任何目录的话，docker的备份和迁移更为简单简单一些。&lt;/p>
&lt;h2 id="最终命令的整理">最终命令的整理
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">docker run -d --restart unless-stopped --name baota \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 51888:8888 -p 51022:22 -p 51443:443 -p 51080:80 -p 51188:888 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 51081:51081 -p 51444:51444 -p 51000:22 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 51306:3306 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 51379:6379 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 51432:5432 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 51017:27017 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-p 51200-51299:51200-51299 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">btpanel/baota:lnmp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="默认账户名密码-和登录地址">默认账户名密码 和登录地址
&lt;/h2>&lt;p>现在，您可以在浏览器访问默认地址 http://您的ip地址:8888/btpanel 上的宝塔面板。
默认用户：btpanel
默认密码：btpaneldocker
默认SSH密码：用户名 root 密码 btpaneldocker&lt;/p>
&lt;p>默认用户：btpanel&lt;br>
默认密码：btpaneldocker&lt;br>
容器默认SSH密码：btpaneldocker&lt;/p>
&lt;h2 id="其他">其他
&lt;/h2>&lt;h3 id="容器内的服务处理">容器内的服务处理
&lt;/h3>&lt;p>是使用的&lt;code>/bt.sh&lt;/code> 这个文件，除了默认服务之外，其他服务需要自行添加默认内容&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
init_path=/etc/init.d
Root_Path=`cat /var/bt_setupPath.conf`
Setup_Path=$Root_Path/server/mysql
Data_Path=$Root_Path/server/data
soft_start(){
${init_path}/nginx start
${init_path}/php-fpm-74 start
${init_path}/pure-ftpd start
${init_path}/bt restart
pkill crond
/sbin/crond
/usr/sbin/sshd -D &amp;amp;
}
is_empty_Data(){
return `ls -A ${Data_Path}/|wc -w`
}
init_mysql(){
# initialize_mysql
if [ -f /init_mysql.sh ];then
sh /init_mysql.sh
rm -f /init_mysql.sh
fi
}
start_mysql(){
chown -R mysql:mysql ${Data_Path}
chgrp -R mysql ${Setup_Path}/.
${init_path}/mysqld start
rm -f /init_mysql.sh
}
soft_start &amp;gt; /dev/null
is_empty_Data &amp;gt; /dev/null
if [ $? == 0 ];then
init_mysql &amp;gt; /dev/null
else
start_mysql &amp;gt; /dev/null
fi
tail -f /dev/null
&lt;/code>&lt;/pre>
&lt;h3 id="计划任务的bug">计划任务的bug
&lt;/h3>&lt;p>宿主机运行&lt;/p>
&lt;pre>&lt;code> docker exec -it 容器名称baota bash
pkill crond &amp;amp;&amp;amp; /sbin/crond
&lt;/code>&lt;/pre>
&lt;p>然后重新添加计划任务&lt;/p>
&lt;h3 id="容器内的ssh的bug">容器内的ssh的bug
&lt;/h3>&lt;p>已经默认安装了openssh，但是可能还需要处理一下才可以连接，注意 复制的时候 要看一下宿主机的情况。如果不是host模式的话不存在这个问题&lt;/p>
&lt;pre>&lt;code>#获取容器ID
docker ps|awk 'NR &amp;gt; 1{print$1}'
#复制必要密钥文件到容器内
\cp -r /etc/ssh/ssh_host_* /home/
chmod 600 /home/ssh_host_*
docker cp /home/ssh_host_rsa_key 容器ID:/etc/ssh/
docker cp /home/ssh_host_ecdsa_key 容器ID:/etc/ssh/
docker cp /home/ssh_host_ed25519_key 容器ID:/etc/ssh/
#给容器设置一个root密码，qqwwee123替换成自己想要的密码
docker exec -it 容器ID /bin/bash -c &amp;quot;echo 'qqwwee123'|passwd --stdin root&amp;quot;
#让sshd运行起来
docker exec 容器ID /usr/sbin/sshd -D &amp;amp;
rm -rf /home/ssh_host_*
&lt;/code>&lt;/pre>
&lt;h2 id="问题和其他bug">问题和其他bug
&lt;/h2>&lt;ul>
&lt;li>docker版本更新滞后，也不算大事，宝塔新版问题更多哈哈&lt;/li>
&lt;li>web控制面板卡顿，web终端卡顿 甚至打不开，不缺点是宝塔新版的问题，还是软路由器性能问题&lt;/li>
&lt;li>宝塔内置系统防火墙不可用（docker的限制。不过确实没必要）&lt;/li>
&lt;li>ssl的证书夹在某些特定情况下 无法保存的问题。这个应该是宝塔自己的bug，月经bug 宝塔反反复复，经常间隔几个版本就出现一次 .重新登录一次面板，然后续签一次证书，或者重新部署一次。运气好的话 就好了，或者整个站点都删掉重新添加，运气不好的话，。。。。删了宝塔吧。。&lt;/li>
&lt;li>innodb_log_buffer_size 的bug，这个以及是宝塔本身的月经bug 反复出现，手动设置一下就好&lt;/li>
&lt;li>web面板 配置mysql的界面 mysql状态不显示，这个应该也是宝塔自己的bug，月经bug&lt;/li>
&lt;li>web面板 终端偶尔打不开 应该是xterm和bug，宝塔本身也或许有问题，退出重新登录就好，或者清理浏览器缓存 重新登录&lt;/li>
&lt;li>通知模块偶尔显示 名称：undefined xxx，无配置。。这个也是宝塔的月经bug&lt;/li>
&lt;li>不算是问题，但一定注意第一时间修改 面板用户名密码以及ssh的root密码&lt;/li>
&lt;/ul>
&lt;h2 id="题外话">题外话
&lt;/h2>&lt;p>其实已经很久没有新装过宝塔了，然后发现 现在的宝塔 是bug成堆。。。硬硬把用户当作实验台，略有能力的情况下能不用就不用了吧&lt;br>
以前会去宝塔论坛 认真截图 说复现步骤，反馈，然后论坛客服 除了一堆毫无意义的机械回复，也没啥，有时候反馈一个bug 竟然要回帖数次。。。
基本上 修补了上一个bug 然后出现新bug&lt;/p>
&lt;p>正经的生产环境，真的不怎么建议用宝塔。。。毕竟现在docker环境可选多部署一个新环境也不难&lt;/p></description></item><item><title>docker运行nginx 并反代内网的一些服务，</title><link>https://dev.leiyanhui.com/docker/nginx-proxy-manage/</link><pubDate>Sun, 27 Nov 2022 08:14:20 +0800</pubDate><guid>https://dev.leiyanhui.com/docker/nginx-proxy-manage/</guid><description>&lt;p>本文停止更新，建议使用 nginxwebui ：https://dev.leiyanhui.com/openwrt/nginx-proxy-ssl&lt;/p>
&lt;p>支持中文，也支持静态站，甚至可以转发php之类的。&lt;/p>
&lt;p>&lt;code>nginx-proxy-manage&lt;/code> 是一个有web管理解决的 纯nginx管理工具，基于node开发的。类似宝塔。。自带了ssl证书管理（基于Let’s Encrypt的）&lt;/p>
&lt;p>适合 在轻量的主机上运行，例如 软路由。。。&lt;/p>
&lt;p>比宝塔来说优势有&lt;/p>
&lt;ul>
&lt;li>支持更多dns验证api，几乎支持所有的常见国内外域名和dns商，并且支持 acmedns_api&lt;/li>
&lt;li>更加轻量简单
缺点嘛，，就是没有别的功能了。只有nginx 和 ssl 。所以很适合 路由上使用&lt;/li>
&lt;/ul>
&lt;p>要求多的话，还是建议使用宝塔，&lt;a class="link" href="https://dev.leiyanhui.com/docker/baota" target="_blank" rel="noopener"
>现在宝塔官网已经发布docker&lt;/a>&lt;/p>
&lt;h2 id="基本命令">基本命令
&lt;/h2>&lt;p>参考：https://hub.docker.com/r/jlesage/nginx-proxy-manager
改动一下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">docker run -d \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --name=nginx-proxy-manager \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -p 50181:8181 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -p 50080:8080 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -p 50443:4443 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jlesage/nginx-proxy-manager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>web访问端口 是 50080:8080 ssl 50443:4443 管理端口 50181:8181
默认用户名密码 &lt;code>admin@example.com&lt;/code> &lt;code>changeme&lt;/code>&lt;/p>
&lt;h3 id="后续我发现真正的官网镜像实际不是这个">后续我发现真正的官网镜像实际不是这个！
&lt;/h3>&lt;p>而是 &lt;code>jc21/nginx-proxy-manager:latest&lt;/code> 文档地址：https://nginxproxymanager.com/setup/#using-mysql-mariadb-database
并且官网文档是明确支持ipv6的 只是默认禁用&lt;/p>
&lt;h2 id="基本使用">基本使用
&lt;/h2>&lt;h3 id="修改用户密码">修改用户密码
&lt;/h3>&lt;p>登录后就会自动提示修改，按照提示修改一下&lt;/p>
&lt;h3 id="试着申请个域名ssl">试着申请个域名ssl
&lt;/h3>&lt;p>很简单 不用多说，看不懂 自己开翻译软件（吐槽：软路由圈子 英语不好 还不肯开翻译软件的人。。多好。。）&lt;/p>
&lt;h2 id="这个工具存在的问题">这个工具存在的问题
&lt;/h2>&lt;ul>
&lt;li>只支持LE的证书，我本想和acme.sh的配合 使用，发现。。。这货好像把证书放在了数据库里面，，服了。。。然后自定义证书 也只能是上传。。。
&lt;ul>
&lt;li>后续发现存放到了/etc/letsencrypt ，但是格式和acme.sh 不能完全兼容。。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>dns api的配置记录不能自动保存，添加多个证书的时候 需要每次都输入一次 api接口的key信息&lt;/li>
&lt;li>下载回来的证书，只有nginx格式&lt;/li>
&lt;li>面板本身好像不可以直接启用ssl，应该需要sh进去改配置文件，或者自己代理自己一次&lt;/li>
&lt;li>没有中文界面&lt;/li>
&lt;li>镜像体积不小， 182.90MB 左右&lt;/li>
&lt;li>在主机列表页面直接打开对应的域名，是使用默认端口打开。不会帮你跳到&lt;code>50080:8080 ssl 50443:4443&lt;/code>,我node 水平一般也没有找打 队以ing的文件&lt;/li>
&lt;li>同时 在反代 pve 或 openwrt等应用的适合，会导致 vnc或者终端控制台打不开。（这个好像是 noVNC 以及xterm.js的问题）
&lt;ul>
&lt;li>pve可以用 /etc/pve/local/qemu-server/&lt;!-- raw HTML omitted -->.conf &lt;a class="link" href="https://pve.proxmox.com/wiki/VNC_Client_Access" target="_blank" rel="noopener"
>添加vnc配置的方法用客户端链接&lt;/a>&lt;/li>
&lt;li>oc的控制docker台 可以用shell登录后 &lt;code> docker exec -it 容器名 /bin/bash&lt;/code>&lt;/li>
&lt;li>或者docker 另外跑一个浏览器 来访问内网的这个web，然后nginx-proxy-manager再套上ssl 就可以了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>其他暂未发现&lt;/li>
&lt;/ul>
&lt;h2 id="结论">结论
&lt;/h2>&lt;p>很适合要求不高的情况下使用，也适合小白。
其实 还是建议直接docker跑一个宝塔算了，自己用debian、centos基础做也行，现在宝塔官方也支持docker了&lt;/p>
&lt;p>&lt;a class="link" href="https://dev.leiyanhui.com/docker/baota" target="_blank" rel="noopener"
>https://dev.leiyanhui.com/docker/baota&lt;/a>&lt;/p>
&lt;h2 id="另外一个替代项目">另外一个替代项目
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.nginxwebui.cn/" target="_blank" rel="noopener"
>https://www.nginxwebui.cn/&lt;/a>&lt;/p>
&lt;p>简单看了一下 国产的，支持中文，支持负载均衡，但是证书虽然是用 acme.sh ,但是同样也是 只支持 LE的自动续期和申请。。&lt;/p>
&lt;p>使用说明 ：https://dev.leiyanhui.com/openwrt/nginx-proxy-ssl&lt;/p>
&lt;p>官网：https://github.com/cym1102/nginxWebUI#docker%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E&lt;/p></description></item><item><title>docker 运行证书管理工具acme.sh</title><link>https://dev.leiyanhui.com/docker/acme-sh/</link><pubDate>Sat, 26 Nov 2022 06:14:20 +0800</pubDate><guid>https://dev.leiyanhui.com/docker/acme-sh/</guid><description>&lt;p>支持在所有运行docker的设备上 linux系统 windows macos openwrt unraid pve等 自动申请签发证书（爱快这种畸形的除外）&lt;/p>
&lt;h2 id="简单的运行">简单的运行
&lt;/h2>&lt;pre>&lt;code>docker run --rm -itd \
-v &amp;quot;$(pwd)/out&amp;quot;:/acme.sh \
--net=host \
--name=acme.sh \
neilpang/acme.sh daemon
&lt;/code>&lt;/pre>
&lt;h2 id="使用方法">使用方法
&lt;/h2>&lt;pre>&lt;code>docker exec acme.sh --help
docker exec acme.sh --issue --dns dns_cf -d *.example.com -d example.com
&lt;/code>&lt;/pre>
&lt;h2 id="指定dns的api">指定dns的api
&lt;/h2>&lt;p>走dns验证的，例如cf家的&lt;/p>
&lt;pre>&lt;code>docker run --rm -itd \
-v &amp;quot;$(pwd)/ssl_out&amp;quot;:/acme.sh \
-e CF_Email=&amp;quot;example@example.com&amp;quot; \
-e CF_Key=&amp;quot;asasasasasadasasas&amp;quot; \
--net=host \
--name=acme.sh \
neilpang/acme.sh daemon
&lt;/code>&lt;/pre>
&lt;p>如果是 dnspod&lt;/p>
&lt;pre>&lt;code>export DP_Key=&amp;quot;sADDsdasdgdsf&amp;quot;
docker run --rm -itd \
-v &amp;quot;$(pwd)/ssl_out&amp;quot;:/acme.sh \
-e DP_Id=&amp;quot;1234&amp;quot; \
-e DP_Key=&amp;quot;sADDsdasdgdsf&amp;quot; \
--net=host \
--name=acme.sh \
neilpang/acme.sh daemon
&lt;/code>&lt;/pre>
&lt;p>其他的dns 的api参考 &lt;a class="link" href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" target="_blank" rel="noopener"
>https://github.com/acmesh-official/acme.sh/wiki/dnsapi&lt;/a>&lt;/p>
&lt;p>如果不支持自动api的话，参考他官网的别名解析验证 &lt;a class="link" href="https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode" target="_blank" rel="noopener"
>https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode&lt;/a>&lt;/p>
&lt;h2 id="进阶">进阶
&lt;/h2>&lt;p>可以和其他容器 包括 宝塔 或者 nginx-proxy-manager 配合使用（这两个只支持LE的免费域名，兼容性极差）&lt;/p>
&lt;h2 id="其他资源">其他资源
&lt;/h2>&lt;p>支持180天的 （半年的）泛域名 以及 ip申请 ，应该 还是不支持内网ip的&lt;/p>
&lt;p>&lt;a class="link" href="https://hostloc.com/forum.php?mod=viewthread&amp;amp;tid=1050449" target="_blank" rel="noopener"
>https://hostloc.com/forum.php?mod=viewthread&amp;tid=1050449&lt;/a>&lt;/p>
&lt;p>作者主页：https://github.com/Neilpang&lt;/p></description></item><item><title>docker5.7</title><link>https://dev.leiyanhui.com/docker/mysql5-7/</link><pubDate>Sat, 26 Nov 2022 06:14:20 +0800</pubDate><guid>https://dev.leiyanhui.com/docker/mysql5-7/</guid><description>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">docker&lt;/span> &lt;span class="n">run&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="n">mysql5&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">7&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="mi">3306&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3306&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="n">MYSQL_ROOT_PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">123456&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">d&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">local&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker_data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mysql&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">local&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker_data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">conf&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">etc&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">/&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">local&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker_data&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">logs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nb">log&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mysql&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mysql&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">5.7&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>输入法的选择，win linux macos 安卓 ios</title><link>https://dev.leiyanhui.com/c/inputexe/</link><pubDate>Sat, 22 Oct 2022 06:14:20 +0800</pubDate><guid>https://dev.leiyanhui.com/c/inputexe/</guid><description>&lt;h1 id="输入法的选择">输入法的选择
&lt;/h1>&lt;h2 id="输入法的选择-1">输入法的选择
&lt;/h2>&lt;h2 id="先说结论">先说结论
&lt;/h2>&lt;blockquote>
&lt;p>rime为主，独立帐号的百度输入法 辅助&lt;/p>&lt;/blockquote>
&lt;h2 id="本文最后一次更新2022年11月29日">本文最后一次更新2022年11月29日。
&lt;/h2>&lt;p>win linux 已经 全部切换到 rime。安卓有客户端，但是研究过怎么用，我安卓是备用电话机。。
ios 暂时还是用的百度输入法。 美区有&lt;code>iRime&lt;/code> (没开源国区下架了)1.99刀，可以用。
linux下偶尔也用&lt;code>fcitx-googlepinyin&lt;/code> 比较轻量&lt;/p>
&lt;p>优点:&lt;/p>
&lt;ul>
&lt;li>流畅 非常非常流畅，哪怕momo7w这种N年前都百元平板上都可以流畅输入&lt;/li>
&lt;li>无隐私问题&lt;/li>
&lt;li>字库可以自己git 或者 坚果云 备份&lt;/li>
&lt;li>除了ios之外所有平台可用&lt;/li>
&lt;li>皮肤可以自定义 可以自行配置&lt;/li>
&lt;li>扩展性很强&lt;/li>
&lt;li>开源 快平台&lt;/li>
&lt;li>标准词库格式&lt;/li>
&lt;/ul>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>新人初次上手难度大 需要设置的地方多 部分配置需要自行修改配置文件&lt;/li>
&lt;li>没有云输入，也就是新鲜热词词库是没有的&lt;/li>
&lt;li>linux不支持&lt;code>fcitx-cloudpinyin&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>官网地址：https://rime.im 下载链接：&lt;a class="link" href="https://rime.im/download/" target="_blank" rel="noopener"
>https://rime.im/download/&lt;/a>
win下叫做 小狼毫 linux下可选 fcitx-rime(第三方) 或者 ibus-rime
===========以下是旧文章================&lt;/p>
&lt;h2 id="再说原因">再说原因
&lt;/h2>&lt;blockquote>
&lt;p>win mac ios 安卓 部分Linux桌面版可以用 词库过得去 ios下基本完美 语音识别准确率过得去&lt;/p>&lt;/blockquote>
&lt;h2 id="不选择其他的原因">不选择其他的原因
&lt;/h2>&lt;blockquote>
&lt;p>· QQ拼音 不支持非Linux 和mac 不考虑 · 搜狗拼音且不说广告【百度拼音可以说没有】，ios下频繁消失的问题频繁出现 · 讯飞 mac和linux支持不好 · 搜狗 另外在多数linux发行版上面没有词库同步&lt;/p>&lt;/blockquote>
&lt;p>#再说缺点&lt;/p>
&lt;blockquote>
&lt;p>· 李彦宏家的 这货&amp;hellip; 隐私问题 独立账号登陆吧 · 设置同步 好像有逻辑问题，比如候选词9个，就不行 · 有时候按错键莫名其妙插入emjo表情，在一些在线编辑器就成了上传图片 · 没有错键识别纠正，比如 jiuzheng 我如果按成kiuzheng 不会自动纠正&lt;/p>&lt;/blockquote></description></item></channel></rss>